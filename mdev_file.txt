                             MDEV File Format
                               15 May 2023

This document describes the MDEV file format.  For an overview of the MDEV
mechanism, see the MDEV documentation file.


Syntax

  MDEV files are intended to be reasonably readable and editable by humans
  using ordinary text editor programs.

  MDEV files contain lines of ASCII text.  End of lines may be indicated
  by either a carriage return (CR, code 13), line feed (LF, code 10), or a
  CR-LF combination.  Readers must be able to interpret any of these end
  of line indications, on a line by line basis.

  Comments

    Lines where the body is any of:

      1 - Empty (0 characters).

      2 - Only blanks (code 32).

      3 - The first non-blank character is "*" (code 66).

    are ignored content-wise, and are collectively referred to as
    "comment" lines.  Comment lines are intended to aid human readability
    and understanding.  They have no effect on the data contents of MDEV
    files.

    Comment lines are generally ignored and not mentioned in the remainder
    of this document.  However, it is legal for zero or more comment lines
    to be between any two lines, at the start of the file, and at the end
    of the file.

  Commands and parameters

    Data is specified by commands.  Commands start with the command name
    keyword, followed by parameters unique to that command.  All keywords,
    which include command names, are case-insensitive.

    Parameters are separated from the command name and from each other by
    one or more blanks.

    Individual parameters may be enclosed in quotes ("...") or
    apostrophies ('...').  This is required if the parameter is a text
    string that contains any blank, or starts or ends with a quote or
    apostrophie.  The value of the parameter will be the string enclosed
    by, but not including the outer quotes or apostrophies.  To indicate a
    single character of the type used to enclose the string, that
    character must be doubled in the body of the string.  For example, the
    following two text parameters have the same value:

      "Don't say ""never""."
      'Don''t say "never".'

    Integer parameters have the format

      <radix>#<+-><digits>.

    RADIX is the number base (radix) in decimal, with the allowed range
    being 2-36.

    The "<+->" part can be either "+", "-", or be omitted.  This indicates
    the sign of the value.  Positive is implied when the sign is omitted.

    DIGITS is the digits of the number in the specified radix.  The normal
    digits 0-9 are used for digit values 0 to 9.  The letters A-Z or a-z
    are used for digit values 10 to 35.  Only digits with values less than
    the radix are allowed.  Leading zeros are allowed.  A minimum of one
    digit is required.

    The "<radix>#" part may be omitted, in which case the radix is implied
    to be 10 (decimal).

    For example, the following integer parameters all have the decimal
    value of 249:

      249
      +00249
      10#249
      10#+249
      16#F9
      2#11111001

  Hierarchy

    The data in MDEV files is hierarchical.  The hierarchy is indicated by
    the indentation level (the number of blanks before the first non-blank
    character) of each line.  Top level data has 0 indentation (the first
    non-blank is in column 1).  Each successive level down in the
    hierarchy has an additional 2 characters of indentation.  For example,
    data one level below the top starts in column 3, two levels down in
    column 5, etc.

    All commands must be indented a multiple of 2 characters.  A command
    starting in column 4, for example, is illegal.

    There are no explicit commands to start and end subordinate blocks of
    data.  Data hierarchy is solely and ridgidly defined by the
    indentation level of each command.  A subordinate block is ended when
    a command at a higher level is encountered.


MDEV file set

  MDEV files provide information for and about modular device modules.
  Source code for modules used in one build may be kept in various places.
  Modules specific to a particular firmware would usually be in the same
  directory as the firmware source files.  Modules for a class of related
  devices may be in their own directory.  Modules for generic devices may
  be in yet other source directories.

  The MDEV configuration program starts by reading the MDEV files in the
  source directory of the specific firmware being built.  Those MDEV files
  may reference other directories.  The MDEV files in those directories
  may reference more directories, etc.

  All MDEV files in a directory are read if that directory is referenced.
  There is no "master" MDEV file per directory, nor is there a means to
  avoid reading a particular MDEV file if the directory it is in is
  referenced.

  It is intended that each MDEV module includes one MDEV file in the
  directory, along with its source code and other files.  This MDEV file
  will be automatically found and read by the MDEV configuration program.


Commands

  MDEVDIR dir

    Specifies directory DIR as possibly containing MDEV files.
    Directories may be referenced multiple times from multiple files.
    However, the files in each directory are read only once.  There is no
    guarantee in what order unread directories are read, or the files
    within directories are read.

  FILE name

    Start a subordinate block for the file named NAME.  NAME can be a
    relative pathname.  The absolute pathname will be resolved relative to
    the directory containing the file this command is in.  Only absolute
    pathnames of files are used internally, and to determine whether two
    files are the same or not.

    REQUIRES fnam

      The file FNAM is required in the process of building file NAME.

  INTERFACE iface

    Starts a subordinate block for a particular named interface.  IFACE is
    the interface name, and is case-sensitive.

    This command is used to provide optional details about an interface.
    It does not indicate that the interface is used or provided by any
    firmware or MDEV module.

    There may be multiple INTERFACE commands for the same interface.
    However, any optional additional information is taken from the first
    INTERFACE command encountered that provides the information, and
    ignored from subsequent INTERFACE commands.

    DESC
      text ... text
      ...
      text ... text

      Provides descriptive text for the particular interface.

      The text may be wrapped on multiple lines, with a total length limit
      of 8000 characters.  The text is considered "flowed".  The line
      breaks here are not meaningful, and are only for readability in this
      file.  The text may be presented to the user wrapped to a new line
      at any space.

    All interfaces must eventually be "defined", meaning a description is
    provided.  It is an error if an interface is referenced, but not
    eventually described somewhere in the MDEV file set.

  FIRMWARE [name ... name] name

    Starts a subordinate block that pertains only to the named firmware.
    The final NAME parameter is the actual firmware name.  This should
    match the FWNAME environment variable value when the firmware is
    built.

    The leading NAME parameters are optional, and indicate a naming
    hierarchy within which the bare firmware name is unique.  This would
    generally follow the source repository tree structure within the
    SOURCE directory.

    PROVIDES iface

      Indicates that the firmware natively provides the IFACE interface.
      There may be any number of PROVIDES commands per firmware.  IFACE is
      a case-sensitive interface name.

      MDEV modules are included in the firmware when all interfaces they
      require are available.  These interfaces can be made available by
      the firmware directly (as indicated by this command), or by other
      MDEV modules.

    ID id modname

      Assigns a fixed ID to a module in this firmware.  Valid IDs are in
      the range of 1 to 254.

      Without this command, modules are automatically assigned unique IDs
      within a firmware when it is determined that the module can be added
      to the firmware.  This command forces the module to have a
      particular ID.  Other modules will not be assigned this ID.  It is
      an error to assign the same ID to different modules using this
      command.

      Assigning an ID to a module in a firmware does not guarantee that
      the module will be included in the firmware.  This command
      essentially reserves the ID, should the module be included in the
      firmware.

      Each firmware has its own ID namespace.  This means that while each
      firmware is limited to having 254 modules included, the global
      number of total available modules is unlimited.

    NOTMOD modname

      Indicates a module to not include in the firmware, even if its
      constraints would otherwise be met.  The module need not be
      eventually defined.

  MODULE name

    Starts a subordinate block for a particular MDEV module.  NAME is the
    module name, and is case-sensitive.  There may be only one MODULE
    command for a specific module within any MDEV file set.

    DESC
      text ... text
      ...
      text ... text

      Provides descriptive text for the particular module.  See the
      INTERFACE > DESC command description earlier in this file for
      details.

    CFGENT name

      Explicitly sets the name of the configuration routine entry point.
      The default is the module name followed by "_cfg".

      The entry point name is the full name actually in the linker symbol
      table.  If the routine is written in a high level language that
      implicitly "decorates" subroutine names, then the decorated name
      must be given here.  For example, the XC16 compiler prepends
      function names with "_".  If the configuration function is written
      in XC16 and named "xyz_config", then NAME here must be set to
      "_xyz_config".

    DECONFIG name

      Provides the name of the optional entry point to "undo" a previous
      configuration.  This routine will only be called by the system when
      the configuration routine was previously called.  The purpose is to
      "turn off" the MDEV and deallocate any resources used by the MDEV,
      such as tasks and temporary dynamic memory.

      MDEVs that receive calls from base system code (not other MDEVs)
      need to make sure such calls will do nothing and not attempt to
      access deallocated resources.  For example, a routine into an MDEV
      to store a value in a dynamically allocated database may still be
      called after de-configuration.  However, that routine must then be
      sure to not attempt to write to the database, since its memory no
      longer exists.

      All MDEVs may be shut down by the system, but are not required to
      have a de-config entry point.  To shut down and restart all MDEVs,
      the system will:

        1 - Run the de-config entry point of any MDEVs that have them.
            These will be called in reverse dependency order.  For
            example, the last MDEV to be configured will be the first MDEV
            to be de-configured.

        2 - Stop all tasks launched after the base system tasks.

        3 - Deallocate all dynamic memory.  This includes both temporary
            and permanent dynamic memory.

        4 - Re-check the non-volatile memory checksum.

        5 - Re-run the configuration routines for all MDEVs, just as was
            done when the system was first started.

      If steps 2 and 3 are sufficient to shut down an MDEV, then no
      de-config entry point needs to be provided.

    USES iface [shared]

      Indicates one interface that this module uses, and therefore
      requires to be previously available.  The optional SHARED keyword
      indicates that the use of this interface can be shared with other
      modules.  It will only be shared with other modules that also
      indicate they can share the interface.  The default without the
      SHARED keyword is that this module requires exclusive access to the
      interface.

      IFACE is the interface name, and is case-sensitive.

      There may be any number of USES commands within a MODULE block.

    PROVIDES iface

      Indicates that this module provides the interface IFACE for other
      modules to use.  See the FIRMWARE > PROVIDES command description for
      details.

      There may be any number of PROVIDES commands within a MODULE block.

    TEMPLATE filename

      Indicates the name of a file that must be customized and added to
      any firmware that includes this MDEV module.  The file name is
      relative to the MDEV file containing this command.

      Template files are copied into the firmware directory, with
      modification.  The results are assumed to be buildable files.  These
      should not be added to the build list for this module.  Put another
      way, template files implicitly result in buildable files.

      The MDEVBUILD program only copies the template to make the local
      file if the local file does not already exist.

      Special strings in the file name and the body of the file are
      substituted with different values.

      The special substitution strings in the file name are:

        QQQ

          Firmware name.

      The special substitution strings in the body of the file are:

        QQ1

          The top level SOURCE directory that ultimately contains the
          firmware source code.  If the firmware source repository is
          immediately in SOURCE, then this is the repository name.

          For example, if the firmware source repository is
          source/acme/tester, then qq1 expands to "acme".  If the source
          repository is source/tester, then qq1 expands to "tester".

        QQ2

          Firmware name.

        QQ3

          Source module generic name.  For example, if a source module
          file name was "tester_clock.dspic", then qq3 would expand to
          "clock".

        QQ4

          Specific PIC model name without the "PIC", "dsPIC", or similar
          prefix.  Examples of qq4 expansions are "16F877" and
          "33EP512GM706".

        QQ5

          Path of intermediate directories from the QQ1 directory (above)
          to the actual source repository directory.  This is the empty
          string when the source repository for this firmware is
          immediately in the SOURCE directory.

    SOURCE filename

      Indicates a dependency on a particular source file.  FILENAME is
      interpreted relative to the directory containing this MDEV file.

    INCLUDE filename

      Indicates a file that needs to be globally included by the firmware
      using this module.  This file would typically be included from the
      firmware's main project include file.  FILENAME is interpreted
      relative to the directory containing this MDEV file.

    BUILD filename

      Explicitly indicates a file that must be built.  This file will be
      assembled or compiled, and the resulting binary made available to
      the linker.

      Template files implicitly result in buildable files, which should
      not be listed here.

      How a file is built depends on the file name suffix.  The following
      suffixes are supported:

        .dspic

          Assembler source for the 16 bit PICs and dsPICs.  This file is
          first run thru the Embed PIC preprocessor (PREPIC) to make a .as
          file.  This .as file is then assembled using the Microchip
          XC16-ASM assembler.

        .xc16

          C source for the 16 bit PICs and dsPICs.  This file is compiled
          with the Microchip XC16 compiler.

      The relocatable binary resulting from assembling or compiling the
      file will be added to the .mlist file.
